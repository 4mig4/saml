error_log /dev/stderr info;

events {
  worker_connections 1024;
}

http {
  lua_code_cache off;

  init_by_lua_block {
    local constants = require "resty.saml.constants"
    local idp       = require "identity_provider"
    local sp        = require "service_provider"

    require("resty.saml.xml").init({ debug=true, rock_dir="/usr/local/openresty/luajit/lib/luarocks/rocks/lua-resty-saml/dev-1/" })
    require("resty.saml.sig").init({ debug=true })

    ngx.shared.idp = idp:new({
      entity_id="http://localhost:8089",
      sso={
        location="/sso",
      },
      sls={
        location="/sls",
      },
      key_file="/ssl/idp.key",
      cert_file="/ssl/idp.crt",
    })

    ngx.shared.sp = sp:new({
      entity_id="http://localhost:8088",
      sso={
        binding=constants.XMLNS.BINDINGS.HTTP_POST,
        location="/sso",
      },
      acs={
        binding=constants.XMLNS.BINDINGS.HTTP_POST,
        location="/acs",
      },
      sls={
        location="/sls",
      },
      key_file="/ssl/sp.key",
      cert_file="/ssl/sp.crt",
      idp={
        cert_file="/ssl/idp.crt",
      }
    })

    ngx.shared.idp:register_service_provider({
      entity_id = ngx.shared.sp.metadata.entity_id,
      acs = ngx.shared.sp.metadata.acs,
      cert = ngx.shared.sp.cert,
    })
  }

  server {
    listen 8088;

    location = /health {
      return 204;
    }

    location /metadata.xml {
      content_by_lua_block {
        ngx.shared.sp:metadata_xml()
      }
    }

    location /sso {
      content_by_lua_block {
        ngx.shared.sp:sso("/")
      }
    }

    location /acs {
      content_by_lua_block {
        local doc, args, err = ngx.shared.sp:acs()
        if err then
          ngx.log(ngx.ERR, err)
          ngx.exit(ngx.HTTP_BAD_REQUEST)
        end
        --ngx.header["Set-Cookie"] = "username=" .. attrs.username .. ";"
        ngx.header.location = relay_state
        ngx.exit(ngx.HTTP_MOVED_TEMPORARILY)
      }
    }

    location /sls {
      content_by_lua_block {
        ngx.shared.saml:sls()
      }
    }

    location /slo {
      content_by_lua_block {
        ngx.header["Set-Cookie"] = "username=;"
        ngx.exit(HTTP_OK)
      }
    }

    location / {
      content_by_lua_block {
        local username = ngx.var.cookie_username
        if username then
          ngx.say("hello " .. username)
          ngx.exit(HTTP_OK)
        else
          ngx.header.content_type = "text/html"
          ngx.say('<a href="/sso">log in</a>')
          ngx.exit(ngx.HTTP_UNAUTHORIZED)
        end
      }
    }
  }

  server {
    listen 8089;

    location = /health {
      return 204;
    }

    location /metadata.xml {
      content_by_lua_block {
        ngx.shared.idp:metadata_xml()
      }
    }

    location /sso {
      content_by_lua_block {
        ngx.shared.idp:sso()
      }
    }

    location /acs {
      content_by_lua_block {
        local attrs, relay_state = ngx.shared.idp:acs()
        ngx.header["Set-Cookie"] = "username=" .. attrs.username .. ";"
        ngx.header.location = relay_state
        ngx.exit(ngx.HTTP_MOVED_TEMPORARILY)
      }
    }

    location /sls {
      content_by_lua_block {
        ngx.shared.saml:sls()
      }
    }

    location /slo {
      content_by_lua_block {
        ngx.header["Set-Cookie"] = "username=;"
        ngx.exit(HTTP_OK)
      }
    }

    location / {
      content_by_lua_block {
        local username = ngx.var.cookie_username
        if username then
          ngx.say("hello " .. username)
          ngx.exit(HTTP_OK)
        else
          ngx.header.content_type = "text/html"
          ngx.say('<a href="/sso">log in</a>')
          ngx.exit(ngx.HTTP_UNAUTHORIZED)
        end
      }
    }
  }
}
